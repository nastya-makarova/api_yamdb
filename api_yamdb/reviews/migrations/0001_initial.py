# Generated by Django 3.2 on 2024-10-23 19:59

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Имя категории, не более 256 символов', max_length=256, verbose_name='Имя')),
                ('slug', models.SlugField(help_text='Уникальный слаг категории, не более 50 символов', unique=True, verbose_name='Слаг')),
            ],
            options={
                'verbose_name': 'категория',
                'verbose_name_plural': 'Категории',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Имя жанра, не более 256 символов', max_length=256, verbose_name='Имя')),
                ('slug', models.SlugField(help_text='Уникальный слаг жанра, не более 50 символов', unique=True, verbose_name='Слаг')),
            ],
            options={
                'verbose_name': 'жанр',
                'verbose_name_plural': 'Жанры',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='GenreTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reviews.genre', verbose_name='жанр')),
            ],
            options={
                'verbose_name': 'Жанры Произведения',
                'verbose_name_plural': 'Жанры Произведения',
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Имя категории, не более 256 символов', max_length=256, verbose_name='Имя')),
                ('year', models.PositiveIntegerField(help_text='Год выпуска, не больше текущего года', verbose_name='Год')),
                ('description', models.TextField(blank=True, help_text='Описание произведения', verbose_name='Описание')),
                ('category', models.ForeignKey(blank=True, help_text='Категория произведения', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='titles', to='reviews.category', verbose_name='Категория')),
                ('genre', models.ManyToManyField(blank=True, help_text='Жанр произведения', related_name='titles', through='reviews.GenreTitle', to='reviews.Genre', verbose_name='Жанр')),
            ],
            options={
                'verbose_name': 'произведение',
                'verbose_name_plural': 'Произведения',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Текст отзыва', verbose_name='текст отзыва')),
                ('score', models.PositiveSmallIntegerField(help_text='Оценка отзыва', validators=[django.core.validators.MinValueValidator(1, message='Значение оценки должно быть не менее 1'), django.core.validators.MaxValueValidator(10, message='Значение оценки должно быть не более 10')], verbose_name='оценка отзыва')),
                ('pub_date', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Дата публикации отзыва', verbose_name='Дата публикации')),
                ('author', models.ForeignKey(help_text='Автор отзыва', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='автор отзыва')),
                ('title', models.ForeignKey(help_text='Название произведения', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='reviews.title', verbose_name='произведение')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'ordering': ('-pub_date',),
            },
        ),
        migrations.AddField(
            model_name='genretitle',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reviews.title', verbose_name='произведение'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Текст комментария', verbose_name='текст комментария')),
                ('pub_date', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Дата публикации комментария', verbose_name='Дата публикации')),
                ('author', models.ForeignKey(help_text='Автор комментария', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL, verbose_name='автор комментария')),
                ('review', models.ForeignKey(help_text='Отзыв для комментариев', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='reviews.review', verbose_name='отзыв')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'ordering': ('-pub_date',),
            },
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('author', 'title'), name='unique_author_title'),
        ),
    ]
